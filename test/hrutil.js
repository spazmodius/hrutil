'use strict'
const { inspect } = require('util')
const test = require('ava')
const Hr = require('..')

const is = 'is', not = 'not', deepEqual = 'deepEqual'

function when(fn, ...input) {
	return { expect: (expected, assert = is) =>
		test(`${fn.name || fn.toString()}( ${arglist(input)} ) ${assert} ${inspect(expected)}`, t => 
			t[assert](fn(...input), expected)
		)
	}
}

function arglist(args) { return args.map(inspect).join(', ') }

const data = new Map([
	[-9999999.987654321, { hr: [-10000000, 12345679], ms: -9999999987.654321, str: '-9999999.987654321', int: -9999999.987654321e9, safe: false }],
	[-9007199.987654321, { hr: [-9007200, 12345679], ms: -9007199987.654321, str: '-9007199.987654321', int: -9007199.987654321e9, safe: false }],
	[-9007199.254740993, { hr: [-9007200, 745259007], ms: -9007199254.740993, str: '-9007199.254740993', int: -9007199254740993, safe: false }],
	[-9007199.254740992, { hr: [-9007200, 745259008], ms: -9007199254.740992, str: '-9007199.254740992', int: -9007199254740992, safe: false }],
	[-9007199.254740991, { hr: [-9007200, 745259009], ms: -9007199254.740991, str: '-9007199.254740991', int: -9007199254740991, safe: true }],
	[-9007199.254740990, { hr: [-9007200, 745259010], ms: -9007199254.740990, str: '-9007199.25474099', int: -9007199254740990, safe: true }],
	[-9007198.00000002, { hr: [-9007199, 999999980], ms: -9007198000.00002, str: '-9007198.00000002', int: -9007198.00000002e9, safe: true }],
	[-9007198.000000002, { hr: [-9007199, 999999998], ms: -9007198000.000002, str: '-9007198.000000002', int: -9007198.000000002e9, safe: true }],
	[-999999.987654321, { hr: [-1000000, 12345679], ms: -999999987.654321, str: '-999999.987654321', int: -999999.987654321e9, safe: true }],
	[-99999.987654321, { hr: [-100000, 12345679], ms: -99999987.654321, str: '-99999.987654321', int: -99999.987654321e9, safe: true }],
	[-9999.987654321, { hr: [-10000, 12345679], ms: -9999987.654321, str: '-9999.987654321', int: -9999.987654321e9, safe: true }],
	[-2000.0001, { hr: [-2001, .9999e9], ms: -2000000.1, str: '-2000.0001', int: -2000.0001e9, safe: true }],
	[-999.987654321, { hr: [-1000, 12345679], ms: -999987.654321, str: '-999.987654321', int: -999.987654321e9, safe: true }],
	[-99.987654321, { hr: [-100, 12345679], ms: -99987.654321, str: '-99.987654321', int: -99.987654321e9, safe: true }],
	[-11, { hr: [-11, 0], ms: -11000, str: '-11', int: -11e9, safe: true }],
	[-5.25, { hr: [-6, .75e9], ms: -5250, str: '-5.25', int: -5.25e9, safe: true }],
	[-2.75, { hr: [-3, .25e9], ms: -2750, str: '-2.75', int: -2.75e9, safe: true }],
	[-1.5, { hr: [-2, .5e9], ms: -1500, str: '-1.5', int: -1.5e9, safe: true }],
	[-1, { hr: [-1, 0], ms: -1000, str: '-1', int: -1e9, safe: true }],
	[-0.5, { hr: [-1, .5e9], ms: -500, str: '-0.5', int: -0.5e9, safe: true }],
	[0, { hr: [0, 0], ms: 0, str: '0', int: 0e9, safe: true }],
	[0.5, { hr: [0, .5e9], ms: 500, str: '0.5', int: 0.5e9, safe: true }],
	[1, { hr: [1, 0], ms: 1000, str: '1', int: 1e9, safe: true }],
	[1.5, { hr: [1, .5e9], ms: 1500, str: '1.5', int: 1.5e9, safe: true }],
	[2.75, { hr: [2, .75e9], ms: 2750, str: '2.75', int: 2.75e9, safe: true }],
	[5.25, { hr: [5, .25e9], ms: 5250, str: '5.25', int: 5.25e9, safe: true }],
	[11, { hr: [11, 0], ms: 11000, str: '11', int: 11e9, safe: true }],
	[99.987654321, { hr: [99, 987654321], ms: 99987.654321, str: '99.987654321', int: 99.987654321e9, safe: true }],
	[999.987654321, { hr: [999, 987654321], ms: 999987.654321, str: '999.987654321', int: 999.987654321e9, safe: true }],
	[2000.0001, { hr: [2000, .0001e9], ms: 2000000.1, str: '2000.0001', int: 2000.0001e9, safe: true }],
	[9999.987654321, { hr: [9999, 987654321], ms: 9999987.654321, str: '9999.987654321', int: 9999.987654321e9, safe: true }],
	[99999.987654321, { hr: [99999, 987654321], ms: 99999987.654321, str: '99999.987654321', int: 99999.987654321e9, safe: true }],
	[999999.987654321, { hr: [999999, 987654321], ms: 999999987.654321, str: '999999.987654321', int: 999999.987654321e9, safe: true }],
	[9007198.000000002, { hr: [9007198, 2], ms: 9007198000.000002, str: '9007198.000000002', int: 9007198.000000002e9, safe: true }],
	[9007198.00000002, { hr: [9007198, 20], ms: 9007198000.00002, str: '9007198.00000002', int: 9007198.00000002e9, safe: true }],
	[9007199.254740990, { hr: [9007199, 254740990], ms: 9007199254.740990, str: '9007199.25474099', int: 9007199254740990, safe: true }],
	[9007199.254740991, { hr: [9007199, 254740991], ms: 9007199254.740991, str: '9007199.254740991', int: 9007199254740991, safe: true }],
	[9007199.254740992, { hr: [9007199, 254740992], ms: 9007199254.740992, str: '9007199.254740992', int: 9007199254740992, safe: false }],
	[9007199.254740993, { hr: [9007199, 254740993], ms: 9007199254.740993, str: '9007199.254740993', int: 9007199254740993, safe: false }],
	[9007199.987654321, { hr: [9007199, 987654321], ms: 9007199987.654321, str: '9007199.987654321', int: 9007199.987654321e9, safe: false }],
	[9999999.987654321, { hr: [9999999, 987654321], ms: 9999999987.654321, str: '9999999.987654321', int: 9999999.987654321e9, safe: false }],
])

const testdata = [
	[ [-10000000,  12345679], { str: '-9999999.987654321', n: -9999999.98765432, int: -9999999987654320, ms: -9999999987.654322 } ],
	[ [  -9007200,  12345679], { str: '-9007199.987654321', n: -9007199.98765432, int: -9007199987654320, ms: -9007199987.654322 } ],
	[ [  -9007200,745259008], { str: '-9007199.254740992', n: -9007199.254740993, int: -9007199254740992, ms: -9007199254.740992 } ],
	[ [  -9007200,745259010], { str: '-9007199.25474099', n: -9007199.25474099, int: -9007199254740990, ms: -9007199254.74099 } ],
	[ [  -9007199,999999980], { str: '-9007198.00000002', n: -9007198.00000002, int: -9007198000000020, ms: -9007198000.00002 } ],
	[ [  -9007199,999999998], { str: '-9007198.000000002', n: -9007198.000000002, int: -9007198000000002, ms: -9007198000.000002 } ],
	[ [  -1000000,  12345679], { str: '-999999.987654321', n: -999999.987654321, int: -999999987654321, ms: -999999987.654321 } ],
	[ [    -100000,  12345679], { str: '-99999.987654321', n: -99999.987654321, int: -99999987654321, ms: -99999987.654321 } ],
	[ [      -10000,  12345679], { str: '-9999.987654321', n: -9999.987654321, int: -9999987654321, ms: -9999987.654321 } ],
	[ [        -2001,999900000], { str: '-2000.0001', n: -2000.0001, int: -2000000100000, ms: -2000000.1 } ],
	[ [        -1000,  12345679], { str: '-999.987654321', n: -999.987654321, int: -999987654321, ms: -999987.654321 } ],
	[ [          -100,  12345679], { str: '-99.987654321', n: -99.987654321, int: -99987654321, ms: -99987.654321 } ],
	[ [            -11,                0], { str: '-11', n: -11, int: -11000000000, ms: -11000 } ],
	[ [              -6,750000000], { str: '-5.25', n: -5.25, int: -5250000000, ms: -5250 } ],
	[ [              -3,250000000], { str: '-2.75', n: -2.75, int: -2750000000, ms: -2750 } ],
	[ [              -2,500000000], { str: '-1.5', n: -1.5, int: -1500000000, ms: -1500 } ],
	[ [              -1,                0], { str: '-1', n: -1, int: -1000000000, ms: -1000 } ],
	[ [              -1,500000000], { str: '-0.5', n: -0.5, int: -500000000, ms: -500 } ],
	[ [               0,                0], { str: '0', n: 0, int: 0, ms: 0 } ],
	[ [               0,500000000], { str: '0.5', n: 0.5, int: 500000000, ms: 500 } ],
	[ [               1,                0], { str: '1', n: 1, int: 1000000000, ms: 1000 } ],
	[ [               1,500000000], { str: '1.5', n: 1.5, int: 1500000000, ms: 1500 } ],
	[ [               2,750000000], { str: '2.75', n: 2.75, int: 2750000000, ms: 2750 } ],
	[ [               5,250000000], { str: '5.25', n: 5.25, int: 5250000000, ms: 5250 } ],
	[ [             11,                0], { str: '11', n: 11, int: 11000000000, ms: 11000 } ],
	[ [             99,987654321], { str: '99.987654321', n: 99.987654321, int: 99987654321, ms: 99987.654321 } ],
	[ [           999,987654321], { str: '999.987654321', n: 999.987654321, int: 999987654321, ms: 999987.654321 } ],
	[ [         2000,      100000], { str: '2000.0001', n: 2000.0001, int: 2000000100000, ms: 2000000.1 } ],
	[ [         9999,987654321], { str: '9999.987654321', n: 9999.987654321, int: 9999987654321, ms: 9999987.654321 } ],
	[ [       99999,987654321], { str: '99999.987654321', n: 99999.987654321, int: 99999987654321, ms: 99999987.654321 } ],
	[ [     999999,987654321], { str: '999999.987654321', n: 999999.987654321, int: 999999987654321, ms: 999999987.654321 } ],
	[ [   9007198,                2], { str: '9007198.000000002', n: 9007198.000000002, int: 9007198000000002, ms: 9007198000.000002 } ],
	[ [   9007198,              20], { str: '9007198.00000002', n: 9007198.00000002, int: 9007198000000020, ms: 9007198000.00002 } ],
	[ [   9007199,254740991], { str: '9007199.254740991', n: 9007199.25474099, int: 9007199254740991, ms: 9007199254.740992 } ],
	[ [   9007199,254740993], { str: '9007199.254740993', n: 9007199.254740993, int: 9007199254740992, ms: 9007199254.740993 } ],
	[ [   9007199,987654321], { str: '9007199.987654321', n: 9007199.98765432, int: 9007199987654320, ms: 9007199987.654322 } ],
	[ [   9999999,987654321], { str: '9999999.987654321', n: 9999999.98765432, int: 9999999987654320, ms: 9999999987.654322 } ]	,
]

const hr = [3, 4]
when(Hr.clone, hr).expect(hr, not)
when(Hr.clone, hr).expect(hr, deepEqual)

testdata.forEach(({ str, n, int, ms, safe = true }, hr, map) => {
	const neg = map.get(-n)
	when(Hr.add, hr, neg.hr).expect([0,0], deepEqual)
	when(Hr.negate, hr).expect(neg.hr, deepEqual)
	when(Hr.toString, hr).expect(str)
	when(Hr.fromNumber, n).expect(hr, deepEqual)
	when(Hr.toNumber, hr).expect(n)
	if (safe)
		when(Hr.toInteger, hr).expect(int)
	when(Hr.toMs, hr).expect(ms)
	// when(Hr.fromMs, ms).expect(hr, deepEqual)
	// when(hr=>Hr.toInteger(hr).toString(), hr).expect(hr.join(''))
})

